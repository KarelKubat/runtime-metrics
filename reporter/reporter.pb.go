// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reporter.proto

package reporter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Discovery of all the names
type AllNamesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllNamesRequest) Reset()         { *m = AllNamesRequest{} }
func (m *AllNamesRequest) String() string { return proto.CompactTextString(m) }
func (*AllNamesRequest) ProtoMessage()    {}
func (*AllNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{0}
}
func (m *AllNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllNamesRequest.Unmarshal(m, b)
}
func (m *AllNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllNamesRequest.Marshal(b, m, deterministic)
}
func (dst *AllNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllNamesRequest.Merge(dst, src)
}
func (m *AllNamesRequest) XXX_Size() int {
	return xxx_messageInfo_AllNamesRequest.Size(m)
}
func (m *AllNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllNamesRequest proto.InternalMessageInfo

type AllNamesResponse struct {
	AverageNames            []string `protobuf:"bytes,1,rep,name=AverageNames,proto3" json:"AverageNames,omitempty"`
	AveragePerDurationNames []string `protobuf:"bytes,2,rep,name=AveragePerDurationNames,proto3" json:"AveragePerDurationNames,omitempty"`
	CounterNames            []string `protobuf:"bytes,3,rep,name=CounterNames,proto3" json:"CounterNames,omitempty"`
	CounterPerDurationNames []string `protobuf:"bytes,4,rep,name=CounterPerDurationNames,proto3" json:"CounterPerDurationNames,omitempty"`
	SumNames                []string `protobuf:"bytes,5,rep,name=SumNames,proto3" json:"SumNames,omitempty"`
	SumPerDurationNames     []string `protobuf:"bytes,6,rep,name=SumPerDurationNames,proto3" json:"SumPerDurationNames,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AllNamesResponse) Reset()         { *m = AllNamesResponse{} }
func (m *AllNamesResponse) String() string { return proto.CompactTextString(m) }
func (*AllNamesResponse) ProtoMessage()    {}
func (*AllNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{1}
}
func (m *AllNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllNamesResponse.Unmarshal(m, b)
}
func (m *AllNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllNamesResponse.Marshal(b, m, deterministic)
}
func (dst *AllNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllNamesResponse.Merge(dst, src)
}
func (m *AllNamesResponse) XXX_Size() int {
	return xxx_messageInfo_AllNamesResponse.Size(m)
}
func (m *AllNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllNamesResponse proto.InternalMessageInfo

func (m *AllNamesResponse) GetAverageNames() []string {
	if m != nil {
		return m.AverageNames
	}
	return nil
}

func (m *AllNamesResponse) GetAveragePerDurationNames() []string {
	if m != nil {
		return m.AveragePerDurationNames
	}
	return nil
}

func (m *AllNamesResponse) GetCounterNames() []string {
	if m != nil {
		return m.CounterNames
	}
	return nil
}

func (m *AllNamesResponse) GetCounterPerDurationNames() []string {
	if m != nil {
		return m.CounterPerDurationNames
	}
	return nil
}

func (m *AllNamesResponse) GetSumNames() []string {
	if m != nil {
		return m.SumNames
	}
	return nil
}

func (m *AllNamesResponse) GetSumPerDurationNames() []string {
	if m != nil {
		return m.SumPerDurationNames
	}
	return nil
}

// Requesting a metric by name
type NameRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameRequest) Reset()         { *m = NameRequest{} }
func (m *NameRequest) String() string { return proto.CompactTextString(m) }
func (*NameRequest) ProtoMessage()    {}
func (*NameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{2}
}
func (m *NameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRequest.Unmarshal(m, b)
}
func (m *NameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRequest.Marshal(b, m, deterministic)
}
func (dst *NameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRequest.Merge(dst, src)
}
func (m *NameRequest) XXX_Size() int {
	return xxx_messageInfo_NameRequest.Size(m)
}
func (m *NameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NameRequest proto.InternalMessageInfo

func (m *NameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Responding to an average
type AverageResponse struct {
	Average              float64  `protobuf:"fixed64,1,opt,name=Average,proto3" json:"Average,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AverageResponse) Reset()         { *m = AverageResponse{} }
func (m *AverageResponse) String() string { return proto.CompactTextString(m) }
func (*AverageResponse) ProtoMessage()    {}
func (*AverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{3}
}
func (m *AverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AverageResponse.Unmarshal(m, b)
}
func (m *AverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AverageResponse.Marshal(b, m, deterministic)
}
func (dst *AverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AverageResponse.Merge(dst, src)
}
func (m *AverageResponse) XXX_Size() int {
	return xxx_messageInfo_AverageResponse.Size(m)
}
func (m *AverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AverageResponse proto.InternalMessageInfo

func (m *AverageResponse) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *AverageResponse) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

// Responding to an average per duration
type AveragePerDurationResponse struct {
	Average              float64              `protobuf:"fixed64,1,opt,name=Average,proto3" json:"Average,omitempty"`
	N                    int64                `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
	Until                *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Until,proto3" json:"Until,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AveragePerDurationResponse) Reset()         { *m = AveragePerDurationResponse{} }
func (m *AveragePerDurationResponse) String() string { return proto.CompactTextString(m) }
func (*AveragePerDurationResponse) ProtoMessage()    {}
func (*AveragePerDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{4}
}
func (m *AveragePerDurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AveragePerDurationResponse.Unmarshal(m, b)
}
func (m *AveragePerDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AveragePerDurationResponse.Marshal(b, m, deterministic)
}
func (dst *AveragePerDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AveragePerDurationResponse.Merge(dst, src)
}
func (m *AveragePerDurationResponse) XXX_Size() int {
	return xxx_messageInfo_AveragePerDurationResponse.Size(m)
}
func (m *AveragePerDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AveragePerDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AveragePerDurationResponse proto.InternalMessageInfo

func (m *AveragePerDurationResponse) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *AveragePerDurationResponse) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *AveragePerDurationResponse) GetUntil() *timestamp.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

type CountResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountResponse) Reset()         { *m = CountResponse{} }
func (m *CountResponse) String() string { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()    {}
func (*CountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{5}
}
func (m *CountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountResponse.Unmarshal(m, b)
}
func (m *CountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountResponse.Marshal(b, m, deterministic)
}
func (dst *CountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountResponse.Merge(dst, src)
}
func (m *CountResponse) XXX_Size() int {
	return xxx_messageInfo_CountResponse.Size(m)
}
func (m *CountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountResponse proto.InternalMessageInfo

func (m *CountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CountPerDurationResponse struct {
	Count                int64                `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Until                *timestamp.Timestamp `protobuf:"bytes,2,opt,name=Until,proto3" json:"Until,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CountPerDurationResponse) Reset()         { *m = CountPerDurationResponse{} }
func (m *CountPerDurationResponse) String() string { return proto.CompactTextString(m) }
func (*CountPerDurationResponse) ProtoMessage()    {}
func (*CountPerDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{6}
}
func (m *CountPerDurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountPerDurationResponse.Unmarshal(m, b)
}
func (m *CountPerDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountPerDurationResponse.Marshal(b, m, deterministic)
}
func (dst *CountPerDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPerDurationResponse.Merge(dst, src)
}
func (m *CountPerDurationResponse) XXX_Size() int {
	return xxx_messageInfo_CountPerDurationResponse.Size(m)
}
func (m *CountPerDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPerDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountPerDurationResponse proto.InternalMessageInfo

func (m *CountPerDurationResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountPerDurationResponse) GetUntil() *timestamp.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

type SumResponse struct {
	Sum                  float64  `protobuf:"fixed64,1,opt,name=Sum,proto3" json:"Sum,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{7}
}
func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (dst *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(dst, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SumResponse) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type SumPerDurationResponse struct {
	Sum                  float64              `protobuf:"fixed64,1,opt,name=Sum,proto3" json:"Sum,omitempty"`
	N                    int64                `protobuf:"varint,2,opt,name=N,proto3" json:"N,omitempty"`
	Until                *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Until,proto3" json:"Until,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SumPerDurationResponse) Reset()         { *m = SumPerDurationResponse{} }
func (m *SumPerDurationResponse) String() string { return proto.CompactTextString(m) }
func (*SumPerDurationResponse) ProtoMessage()    {}
func (*SumPerDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reporter_b4ad6f9b52e79cb8, []int{8}
}
func (m *SumPerDurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumPerDurationResponse.Unmarshal(m, b)
}
func (m *SumPerDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumPerDurationResponse.Marshal(b, m, deterministic)
}
func (dst *SumPerDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumPerDurationResponse.Merge(dst, src)
}
func (m *SumPerDurationResponse) XXX_Size() int {
	return xxx_messageInfo_SumPerDurationResponse.Size(m)
}
func (m *SumPerDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumPerDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumPerDurationResponse proto.InternalMessageInfo

func (m *SumPerDurationResponse) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SumPerDurationResponse) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *SumPerDurationResponse) GetUntil() *timestamp.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

func init() {
	proto.RegisterType((*AllNamesRequest)(nil), "reporter.AllNamesRequest")
	proto.RegisterType((*AllNamesResponse)(nil), "reporter.AllNamesResponse")
	proto.RegisterType((*NameRequest)(nil), "reporter.NameRequest")
	proto.RegisterType((*AverageResponse)(nil), "reporter.AverageResponse")
	proto.RegisterType((*AveragePerDurationResponse)(nil), "reporter.AveragePerDurationResponse")
	proto.RegisterType((*CountResponse)(nil), "reporter.CountResponse")
	proto.RegisterType((*CountPerDurationResponse)(nil), "reporter.CountPerDurationResponse")
	proto.RegisterType((*SumResponse)(nil), "reporter.SumResponse")
	proto.RegisterType((*SumPerDurationResponse)(nil), "reporter.SumPerDurationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReporterClient is the client API for Reporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReporterClient interface {
	AllNames(ctx context.Context, in *AllNamesRequest, opts ...grpc.CallOption) (*AllNamesResponse, error)
	Average(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*AverageResponse, error)
	AveragePerDuration(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*AveragePerDurationResponse, error)
	Count(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*CountResponse, error)
	CountPerDuration(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*CountPerDurationResponse, error)
	Sum(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SumResponse, error)
	SumPerDuration(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SumPerDurationResponse, error)
}

type reporterClient struct {
	cc *grpc.ClientConn
}

func NewReporterClient(cc *grpc.ClientConn) ReporterClient {
	return &reporterClient{cc}
}

func (c *reporterClient) AllNames(ctx context.Context, in *AllNamesRequest, opts ...grpc.CallOption) (*AllNamesResponse, error) {
	out := new(AllNamesResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/AllNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) Average(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*AverageResponse, error) {
	out := new(AverageResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/Average", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) AveragePerDuration(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*AveragePerDurationResponse, error) {
	out := new(AveragePerDurationResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/AveragePerDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) Count(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) CountPerDuration(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*CountPerDurationResponse, error) {
	out := new(CountPerDurationResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/CountPerDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) Sum(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) SumPerDuration(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*SumPerDurationResponse, error) {
	out := new(SumPerDurationResponse)
	err := c.cc.Invoke(ctx, "/reporter.Reporter/SumPerDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReporterServer is the server API for Reporter service.
type ReporterServer interface {
	AllNames(context.Context, *AllNamesRequest) (*AllNamesResponse, error)
	Average(context.Context, *NameRequest) (*AverageResponse, error)
	AveragePerDuration(context.Context, *NameRequest) (*AveragePerDurationResponse, error)
	Count(context.Context, *NameRequest) (*CountResponse, error)
	CountPerDuration(context.Context, *NameRequest) (*CountPerDurationResponse, error)
	Sum(context.Context, *NameRequest) (*SumResponse, error)
	SumPerDuration(context.Context, *NameRequest) (*SumPerDurationResponse, error)
}

func RegisterReporterServer(s *grpc.Server, srv ReporterServer) {
	s.RegisterService(&_Reporter_serviceDesc, srv)
}

func _Reporter_AllNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).AllNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/AllNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).AllNames(ctx, req.(*AllNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_Average_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).Average(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/Average",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).Average(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_AveragePerDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).AveragePerDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/AveragePerDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).AveragePerDuration(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).Count(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_CountPerDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).CountPerDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/CountPerDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).CountPerDuration(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).Sum(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_SumPerDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).SumPerDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporter.Reporter/SumPerDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).SumPerDuration(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reporter.Reporter",
	HandlerType: (*ReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllNames",
			Handler:    _Reporter_AllNames_Handler,
		},
		{
			MethodName: "Average",
			Handler:    _Reporter_Average_Handler,
		},
		{
			MethodName: "AveragePerDuration",
			Handler:    _Reporter_AveragePerDuration_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Reporter_Count_Handler,
		},
		{
			MethodName: "CountPerDuration",
			Handler:    _Reporter_CountPerDuration_Handler,
		},
		{
			MethodName: "Sum",
			Handler:    _Reporter_Sum_Handler,
		},
		{
			MethodName: "SumPerDuration",
			Handler:    _Reporter_SumPerDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporter.proto",
}

func init() { proto.RegisterFile("reporter.proto", fileDescriptor_reporter_b4ad6f9b52e79cb8) }

var fileDescriptor_reporter_b4ad6f9b52e79cb8 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xe3, 0x66, 0x1d, 0xdd, 0xe9, 0xd8, 0xca, 0xe1, 0xcf, 0x42, 0x6e, 0x08, 0x16, 0x48,
	0xbd, 0x21, 0x9b, 0x86, 0x90, 0xd8, 0x05, 0x17, 0xd3, 0xb8, 0x43, 0x2a, 0xc8, 0x81, 0x07, 0x68,
	0x25, 0x53, 0x15, 0x35, 0x75, 0x71, 0xec, 0x3d, 0x0d, 0x6f, 0xc9, 0x0b, 0x4c, 0xb1, 0x9d, 0xff,
	0x89, 0xb4, 0xde, 0xf9, 0x7c, 0xfe, 0xf2, 0xcb, 0xf1, 0xf1, 0x67, 0x38, 0x93, 0x7c, 0x2f, 0xa4,
	0xe2, 0x32, 0xde, 0x4b, 0xa1, 0x04, 0x4e, 0x8a, 0x3a, 0x7c, 0xb3, 0x16, 0x62, 0xbd, 0xe5, 0x97,
	0x46, 0x5f, 0xe9, 0xdf, 0x97, 0x6a, 0x93, 0xf2, 0x4c, 0x2d, 0xd3, 0xbd, 0xb5, 0xd2, 0x67, 0x70,
	0x7e, 0xbb, 0xdd, 0x2e, 0x96, 0x29, 0xcf, 0x18, 0xff, 0xab, 0x79, 0xa6, 0xe8, 0xbf, 0x11, 0xcc,
	0x2a, 0x2d, 0xdb, 0x8b, 0x5d, 0xc6, 0x91, 0xc2, 0xe9, 0xed, 0x3d, 0x97, 0xcb, 0x35, 0x37, 0x7a,
	0x40, 0x22, 0x7f, 0x7e, 0xc2, 0x1a, 0x1a, 0x7e, 0x86, 0x0b, 0x57, 0xff, 0xe0, 0xf2, 0xab, 0x96,
	0x4b, 0xb5, 0x11, 0x3b, 0x6b, 0x1f, 0x19, 0xfb, 0xd0, 0x76, 0x4e, 0xbf, 0x13, 0x7a, 0xa7, 0xb8,
	0xb4, 0x76, 0xdf, 0xd2, 0xeb, 0x5a, 0x4e, 0x77, 0x75, 0x87, 0x7e, 0x64, 0xe9, 0x03, 0xdb, 0x18,
	0xc2, 0x24, 0xd1, 0xa9, 0xb5, 0x8e, 0x8d, 0xb5, 0xac, 0xf1, 0x0a, 0x9e, 0x27, 0x3a, 0xed, 0x10,
	0x8f, 0x8d, 0xad, 0x6f, 0x8b, 0xbe, 0x85, 0x69, 0xbe, 0x70, 0xd3, 0x42, 0x84, 0xa3, 0xbc, 0x0c,
	0x48, 0x44, 0xe6, 0x27, 0xcc, 0xac, 0xe9, 0x0d, 0x9c, 0xbb, 0x93, 0x96, 0xf3, 0x0b, 0xe0, 0x89,
	0x93, 0x8c, 0x93, 0xb0, 0xa2, 0xc4, 0x53, 0x20, 0x8b, 0x60, 0x14, 0x91, 0xb9, 0xcf, 0xc8, 0x82,
	0xde, 0x43, 0xd8, 0x1d, 0xd2, 0xa1, 0x14, 0xbc, 0x82, 0xf1, 0xaf, 0x9d, 0xda, 0x6c, 0x03, 0x3f,
	0x22, 0xf3, 0xe9, 0x75, 0x18, 0xdb, 0x18, 0xc4, 0x45, 0x0c, 0xe2, 0x9f, 0x45, 0x0c, 0x98, 0x35,
	0xd2, 0xf7, 0xf0, 0xd4, 0x8c, 0xaf, 0xfc, 0xd5, 0x0b, 0x18, 0x1b, 0xc1, 0xfc, 0xc8, 0x67, 0xb6,
	0xa0, 0x2b, 0x08, 0xcc, 0xa2, 0xaf, 0xb9, 0xde, 0x2f, 0xaa, 0x56, 0x46, 0x8f, 0x6d, 0xe5, 0x03,
	0x4c, 0x13, 0x9d, 0x96, 0xd8, 0x19, 0xf8, 0x89, 0x4e, 0xdd, 0x79, 0xf3, 0x65, 0x6b, 0x62, 0x7f,
	0xe0, 0x55, 0xf3, 0x9a, 0x1e, 0xfb, 0xe5, 0xe1, 0x53, 0xba, 0xfe, 0xef, 0xc3, 0x84, 0xb9, 0xb7,
	0x85, 0x77, 0x30, 0x29, 0x9e, 0x09, 0xbe, 0x8e, 0xcb, 0x27, 0xd8, 0x7a, 0x4e, 0x61, 0xd8, 0xb7,
	0x65, 0x3b, 0xa4, 0x1e, 0x7e, 0x29, 0x6f, 0x14, 0x5f, 0x56, 0xc6, 0x5a, 0xc0, 0xc2, 0x3a, 0xba,
	0x19, 0x2a, 0xea, 0x61, 0x02, 0xd8, 0x8d, 0xcb, 0x10, 0xe9, 0x5d, 0x87, 0xd4, 0x33, 0x35, 0xea,
	0xe1, 0x8d, 0xbb, 0xc8, 0x21, 0xce, 0x45, 0x25, 0x37, 0x32, 0x43, 0x3d, 0xfc, 0x0e, 0xb3, 0x76,
	0x3e, 0x86, 0x28, 0xb4, 0x45, 0xe9, 0xef, 0xe5, 0x93, 0xb9, 0xc3, 0x21, 0x46, 0x4d, 0xae, 0x45,
	0x86, 0x7a, 0xf8, 0x0d, 0xce, 0x9a, 0xa1, 0x18, 0x22, 0x44, 0x0d, 0x42, 0x6f, 0x0f, 0xab, 0x63,
	0x13, 0x88, 0x8f, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x3f, 0xc0, 0x9b, 0x67, 0x05, 0x00,
	0x00,
}
